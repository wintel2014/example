#include <iostream>
#include <thread>
#include <chrono>
 
void foo()
{
    std::this_thread::sleep_for(std::chrono::seconds(1));
}

void join_thread(std::thread& t)
{
    std::cout <<"In Thread: "<< t.joinable() << '\n';
    if(t.joinable())
        t.join();
} 
int main()
{
/*
    std::thread t;
    std::cout << "before starting, joinable: " << t.joinable() << '\n';
 
    t = std::thread(foo);
    std::cout << "after starting, joinable: " << t.joinable() << '\n';
 
    t.join();
    std::cout << "after joining, joinable: " << t.joinable() << '\n';
  */  
    std::thread t;
    t = std::thread(foo);

    std::thread(join_thread, std::ref(t)).detach();
    std::thread(join_thread, std::ref(t)).detach();
    std::thread(join_thread, std::ref(t)).detach();
    std::this_thread::sleep_for(std::chrono::seconds(3));
}
