/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_TYPES_H
#define example_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _LogInfo__isset {
  _LogInfo__isset() : content(false) {}
  bool content;
} _LogInfo__isset;

class LogInfo {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  LogInfo() : name(), content() {
  }

  virtual ~LogInfo() throw() {}

  std::string name;
  std::string content;

  _LogInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_content(const std::string& val) {
    content = val;
    __isset.content = true;
  }

  bool operator == (const LogInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.content != rhs.__isset.content)
      return false;
    else if (__isset.content && !(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const LogInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LogInfo &a, LogInfo &b);



#endif
