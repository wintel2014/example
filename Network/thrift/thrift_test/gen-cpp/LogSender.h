/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LogSender_H
#define LogSender_H

#include <thrift/TDispatchProcessor.h>
#include "example_types.h"



class LogSenderIf {
 public:
  virtual ~LogSenderIf() {}
  virtual void SendLog(const std::vector<LogInfo> & loglist) = 0;
};

class LogSenderIfFactory {
 public:
  typedef LogSenderIf Handler;

  virtual ~LogSenderIfFactory() {}

  virtual LogSenderIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LogSenderIf* /* handler */) = 0;
};

class LogSenderIfSingletonFactory : virtual public LogSenderIfFactory {
 public:
  LogSenderIfSingletonFactory(const boost::shared_ptr<LogSenderIf>& iface) : iface_(iface) {}
  virtual ~LogSenderIfSingletonFactory() {}

  virtual LogSenderIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LogSenderIf* /* handler */) {}

 protected:
  boost::shared_ptr<LogSenderIf> iface_;
};

class LogSenderNull : virtual public LogSenderIf {
 public:
  virtual ~LogSenderNull() {}
  void SendLog(const std::vector<LogInfo> & /* loglist */) {
    return;
  }
};

typedef struct _LogSender_SendLog_args__isset {
  _LogSender_SendLog_args__isset() : loglist(false) {}
  bool loglist;
} _LogSender_SendLog_args__isset;

class LogSender_SendLog_args {
 public:

  LogSender_SendLog_args() {
  }

  virtual ~LogSender_SendLog_args() throw() {}

  std::vector<LogInfo>  loglist;

  _LogSender_SendLog_args__isset __isset;

  void __set_loglist(const std::vector<LogInfo> & val) {
    loglist = val;
  }

  bool operator == (const LogSender_SendLog_args & rhs) const
  {
    if (!(loglist == rhs.loglist))
      return false;
    return true;
  }
  bool operator != (const LogSender_SendLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogSender_SendLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogSender_SendLog_pargs {
 public:


  virtual ~LogSender_SendLog_pargs() throw() {}

  const std::vector<LogInfo> * loglist;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogSender_SendLog_result {
 public:

  LogSender_SendLog_result() {
  }

  virtual ~LogSender_SendLog_result() throw() {}


  bool operator == (const LogSender_SendLog_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogSender_SendLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogSender_SendLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogSender_SendLog_presult {
 public:


  virtual ~LogSender_SendLog_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LogSenderClient : virtual public LogSenderIf {
 public:
  LogSenderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  LogSenderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendLog(const std::vector<LogInfo> & loglist);
  void send_SendLog(const std::vector<LogInfo> & loglist);
  void recv_SendLog();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LogSenderProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LogSenderIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LogSenderProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SendLog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LogSenderProcessor(boost::shared_ptr<LogSenderIf> iface) :
    iface_(iface) {
    processMap_["SendLog"] = &LogSenderProcessor::process_SendLog;
  }

  virtual ~LogSenderProcessor() {}
};

class LogSenderProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LogSenderProcessorFactory(const ::boost::shared_ptr< LogSenderIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LogSenderIfFactory > handlerFactory_;
};

class LogSenderMultiface : virtual public LogSenderIf {
 public:
  LogSenderMultiface(std::vector<boost::shared_ptr<LogSenderIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LogSenderMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LogSenderIf> > ifaces_;
  LogSenderMultiface() {}
  void add(boost::shared_ptr<LogSenderIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SendLog(const std::vector<LogInfo> & loglist) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendLog(loglist);
    }
    ifaces_[i]->SendLog(loglist);
  }

};



#endif
